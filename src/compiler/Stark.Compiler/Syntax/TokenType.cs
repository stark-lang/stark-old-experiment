// Copyright (c) The Stark Programming Language Contributors. All rights reserved.
// Licensed under the MIT license. 
// See license.txt file in the project root for full license information.
namespace Stark.Compiler.Syntax
{
    /// <summary>
    /// An enumeration to categorize tokens.
    /// </summary>
    public enum TokenType
    {
        Invalid,

        Eof,

        Whitespaces,

        NewLine,

        Comment,

        CommentDoc,

        CommentMultiLine,

        Underscores, // at least one _

        Integer,
        IntegerHexa,
        IntegerOctal,
        IntegerBinary,

        Float,

        Char,

        String,

        StringRaw,

        [TokenText("!")] Exclamation,

        [TokenText("#")] Number,

        [TokenText("$")] Dollar,

        [TokenText("%")] Percent,

        [TokenText("&")] Ampersand,

        [TokenText("(")] OpenParenthesis,

        [TokenText(")")] CloseParenthesis,

        [TokenText("*")] Asterisk,

        [TokenText("+")] Plus,

        [TokenText(",")] Comma,

        [TokenText("-")] Minus,

        [TokenText(".")] Dot,

        [TokenText("/")] Slash,

        [TokenText(":")] Colon,

        [TokenText(";")] SemiColon,

        [TokenText("<")] LessThan,

        [TokenText("=")] Equal,

        [TokenText(">")] GreaterThan,

        [TokenText("?")] Question,

        [TokenText("@")] At,

        [TokenText("[")] OpenBracket,
        [TokenText("\\")] Backslash,
        [TokenText("]")] CloseBracket,

        [TokenText("^")] Caret,
        [TokenText("`")] GraveAccent,

        [TokenText("{")] OpenBrace,
        [TokenText("|")] Pipe,
        [TokenText("}")] CloseBrace,

        [TokenText("~")] Tilde,


        Identifier,

        // The following list is generated by KeywordMatchGenApp
        // It must be put after Identifier above
        [TokenText("abstract")] Abstract,
        [TokenText("alias")] Alias,
        [TokenText("as")] As,
        [TokenText("async")] Async,
        [TokenText("await")] Await,
        [TokenText("base")] Base,
        [TokenText("break")] Break,
        [TokenText("class")] Class,
        [TokenText("const")] Const,
        [TokenText("constructor")] Constructor,
        [TokenText("default")] Default,
        [TokenText("else")] Else,
        [TokenText("enum")] Enum,
        [TokenText("extends")] Extends,
        [TokenText("extern")] Extern,
        [TokenText("false")] False,
        [TokenText("fatal")] Fatal,
        [TokenText("fixed")] Fixed,
        [TokenText("for")] For,
        [TokenText("from")] From,
        [TokenText("func")] Func,
        [TokenText("get")] Get,
        [TokenText("if")] If,
        [TokenText("immutable")] Immutable,
        [TokenText("implements")] Implements,
        [TokenText("import")] Import,
        [TokenText("in")] In,
        [TokenText("internal")] Internal,
        [TokenText("is")] Is,
        [TokenText("isolated")] Isolated,
        [TokenText("let")] Let,
        [TokenText("match")] Match,
        [TokenText("meta")] Meta,
        [TokenText("module")] Module,
        [TokenText("mutable")] Mutable,
        [TokenText("new")] New,
        [TokenText("operator")] Operator,
        [TokenText("out")] Out,
        [TokenText("override")] Override,
        [TokenText("package")] Package,
        [TokenText("params")] Params,
        [TokenText("partial")] Partial,
        [TokenText("permanent")] Permanent,
        [TokenText("private")] Private,
        [TokenText("protected")] Protected,
        [TokenText("public")] Public,
        [TokenText("readonly")] Readonly,
        [TokenText("ref")] Ref,
        [TokenText("requires")] Requires,
        [TokenText("return")] Return,
        [TokenText("scoped")] Scoped,
        [TokenText("sealed")] Sealed,
        [TokenText("set")] Set,
        [TokenText("sizeof")] Sizeof,
        [TokenText("static")] Static,
        [TokenText("struct")] Struct,
        [TokenText("this")] This,
        [TokenText("throw")] Throw,
        [TokenText("trait")] Trait,
        [TokenText("transient")] Transient,
        [TokenText("true")] True,
        [TokenText("typeof")] Typeof,
        [TokenText("unsafe")] Unsafe,
        [TokenText("value")] Value,
        [TokenText("var")] Var,
        [TokenText("virtual")] Virtual,
        [TokenText("volatile")] Volatile,
        [TokenText("where")] Where,
        [TokenText("while")] While,
        [TokenText("with")] With,
    }
}